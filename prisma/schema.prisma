generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  DRIVER
}

enum ServiceType {
  WASH      // غسيل السيارة
  REGISTRATION      // تسجيل
  TRANSPORT         // نقل
  INSPECTION        // فحص
  MAINTENANCE       // صيانة
}

enum ImageCategory {
  PICKUP        // صور قبل التسليم
  DELIVERY      // صور بعد التسليم
  ADDITIONAL    // صور إضافية
  DAMAGE        // صور الأضرار
  INTERIOR      // صور داخلية
  EXTERIOR      // صور خارجية
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(DRIVER)
  isActive  Boolean  @default(true)
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("users")
}


  enum OrderStatus {
  PENDING     // قيد الانتظار
  IN_PROGRESS // قيد التنفيذ  
  COMPLETED   // مكتمل
  CANCELLED   // ملغي
}


enum VehicleSide {
  FRONT      // الأمام
  REAR       // الخلف
  LEFT       // اليسار
  RIGHT      // اليمين
  TOP        // الأعلى
}

enum DamageType {
  DENT_BUMP      // خدش/نتوء
  STONE_CHIP     // رقائق حجرية
  SCRATCH_GRAZE  // خدش/كشط
  PAINT_DAMAGE   // ضرر طلاء
  CRACK_BREAK    // تشقق/كسر
  MISSING        // مفقود
}

// نموذج جديد للأضرار
model VehicleDamage {
  id          String      @id @default(cuid())
  side        VehicleSide
  type        DamageType
  description String?     // وصف الضرر (اختياري)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Foreign Key
  orderId     String
  
  // Relations
  order       Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  // فهرس مركب لتجنب تكرار نفس الضرر في نفس الطلبية
  @@unique([orderId, side, type])
  @@map("vehicle_damages")
}

model Order {
  id                    String      @id @default(cuid())
  orderNumber           Int         @unique @default(autoincrement())
  
    status                OrderStatus @default(PENDING)


  // Client Information
  client                String
  clientPhone           String?
  clientEmail           String?
  clientAddressId       String?     // موجود
  clientAddress         Address?    @relation("ClientAddress", fields: [clientAddressId], references: [id], onDelete: SetNull)  // موجود


   // Billing Information (صاحب الفاتورة)
  isSameBilling         Boolean     @default(true)  // جديد - هل نفس العميل؟
  billingName           String?     // جديد - اسم صاحب الفاتورة
  billingPhone          String?     // جديد - هاتف صاحب الفاتورة
  billingEmail          String?     // جديد - بريد صاحب الفاتورة
  billingAddressId      String?
  billingAddress        Address?    @relation("BillingAddress", fields: [billingAddressId], references: [id], onDelete: SetNull)
    
  
  // Order Details
  description           String?
  comments              String?
  items       VehicleItem[]
  
  // Timestamps
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  // Foreign Keys
  driverId              String

  // Relations
  driver                User                @relation(fields: [driverId], references: [id])
  
  // Addresses
  pickupAddressId       String?     // إضافة هذا السطر
  pickupAddress         Address?    @relation("PickupAddress", fields: [pickupAddressId], references: [id], onDelete: SetNull)  // تعديل هذا السطر
  
  deliveryAddressId     String?     // إضافة هذا السطر
  deliveryAddress       Address?    @relation("DeliveryAddress", fields: [deliveryAddressId], references: [id], onDelete: SetNull)  // تعديل هذا السطر
  
  // Order Components
  vehicleData           VehicleData?
  service               Service?
  expenses              Expenses?
  
  // Signatures
  driverSignatureId     String?     @unique
  customerSignatureId   String?     @unique
  

  damages               VehicleDamage[]


  driverSignature       Signature?  @relation("DriverSignature", fields: [driverSignatureId], references: [id], onDelete: SetNull)
  customerSignature     Signature?  @relation("CustomerSignature", fields: [customerSignatureId], references: [id], onDelete: SetNull)
  
  signatures            Signature[] @relation("OrderSignatures")

  // Images
  images                Image[]

  @@map("orders")
}


// إضافة enum للأغراض
enum VehicleItem {
  PARTITION_NET
  WINTER_TIRES
  HUBCAPS
  REAR_PARCEL_SHELF
  NAVIGATION_SYSTEM
  TRUNK_ROLL_COVER
  SAFETY_VEST
  VEHICLE_KEYS
  WARNING_TRIANGLE
  RADIO
  ALLOY_WHEELS
  SUMMER_TIRES
  OPERATING_MANUAL
  REGISTRATION_DOCUMENT
  COMPRESSOR_REPAIR_KIT
  TOOLS_JACK
  SECOND_SET_OF_TIRES
  EMERGENCY_WHEEL
  ANTENNA
  FUEL_CARD
  FIRST_AID_KIT
  SPARE_TIRE
  SERVICE_BOOK
}

model Address {
  id          String @id @default(cuid())
  street      String
  houseNumber String
  zipCode     String
  city        String
  country     String @default("Deutschland")
  coordinates String? // إحداثيات GPS اختيارية
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  date                DateTime?  // تاريخ الاستلام/التسليم
  companyName         String?    // اسم الشركة
  contactPersonName   String?    // اسم الموظف المختص
  contactPersonPhone  String?    // رقم هاتف الموظف
  contactPersonEmail  String?    // بريد الموظف
  fuelLevel          Int?       // مستوى البنزين من 0 إلى 8
  fuelMeter          Float?     // عداد البنزين

  // Foreign Keys
  // pickupOrderId    String? @unique
  // deliveryOrderId  String? @unique

  // Relations
  // pickupOrder    Order? @relation("PickupAddress", fields: [pickupOrderId], references: [id], onDelete: Cascade)
  // deliveryOrder  Order? @relation("DeliveryAddress", fields: [deliveryOrderId], references: [id], onDelete: Cascade)

  clientOrders     Order[] @relation("ClientAddress")
  billingOrders    Order[] @relation("BillingAddress")
  pickupOrders     Order[] @relation("PickupAddress")    // إضافة هذا السطر
  deliveryOrders   Order[] @relation("DeliveryAddress")  // إضافة هذا السطر
  

  @@map("addresses")
}

model VehicleData {
  id                    String @id @default(cuid())
  vehicleOwner          String
  licensePlateNumber    String
  vin                   String?  // Vehicle Identification Number
  brand                 String?
  model                 String?
  year                  Int?
  color                 String?
  
  ukz                   String?  // ÜKZ
  fin                   String?  // FIN
  bestellnummer         String?  // Bestellnummer
  leasingvertragsnummer String?  // Leasingvertragsnummer
  kostenstelle          String?  // Kostenstelle
  bemerkung             String?  // Bemerkung
  typ                   String?  // Typ

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Foreign Keys
  orderId String @unique

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("vehicle_data")
}

model Service {
  id          String      @id @default(cuid())
  vehicleType String
  serviceType ServiceType
  description String?
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Foreign Keys
  orderId String @unique

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("services")
}

model Expenses {
  id        String @id @default(cuid())
  fuel      Int    @default(0)  // وقود
  wash      Int    @default(0)  // غسيل
  adBlue    Int    @default(0)  // AdBlue
  other     Int    @default(0)  // أخرى
  tollFees  Int    @default(0)  // رسوم الطرق
  parking   Int    @default(0)  // مواقف
  notes     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  orderId String @unique

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model Signature {
  id          String    @id @default(cuid())
  name        String    // اسم الموقع
  signUrl     String    // مسار ملف التوقيع
  isDriver    Boolean   @default(false) // تحديد نوع التوقيع
  signedAt    DateTime  @default(now())
  
  // ربط بالطلبية
  orderId     String
  order       Order     @relation("OrderSignatures", fields: [orderId], references: [id], onDelete: Cascade)
  
  // العلاقات الخاصة للتوقيعات
  driverOrder    Order? @relation("DriverSignature")
  customerOrder  Order? @relation("CustomerSignature")
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("signatures")
}

model Image {
  id          String        @id @default(cuid())
  name        String
  imageUrl    String
  category    ImageCategory
  description String?
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Foreign Keys
  orderId String

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("images")
}